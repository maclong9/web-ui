@Tutorial(time: 30) {
    @Intro(title: "Creating a Static Site") {
        Learn how to build a simple static website with a home page and an about page using the WebUI library.

        This tutorial will walk you through setting up a WebUI project, creating a reusable layout component, building pages with different content, adding navigation between them, and generating the final static site.

        @Image(source: intro-image.png, alt: "A screenshot showing a browser with the two-page static site.")
    }

    @Section(title: "Set Up Your Project") {
        Create a new Swift project and add the WebUI dependency.

        @Steps {
            @Step {
                First, create a new directory for your project and initialize a Swift package.

                @Code(name: "Terminal", file: terminal-init.txt)
            }

            @Step {
                Update your Package.swift file to add the WebUI dependency.

                @Code(name: "Package.swift", file: package-swift.txt)
            }

            @Step {
                Create a Sources directory structure for your project.

                > This structure is an example of how you can organize your project files.

                @Code(name: "Terminal", file: terminal-sources.txt)
            }

            @Step {
                The directory structure will look like this:

                @Code(name: "Terminal", file: terminal-structure.txt)
            }
        }
    }

    @Section(title: "Create a Layout Component") {
        Build a reusable layout component that will provide consistent structure across all pages.

        @Steps {
            @Step {
                Let's create a Layout component, in `Sources/Components/Layout.swift` that will serve as the foundation for our website. Our Layout will create a struct conforming to the `HTML` protocol and accept children via an HTMLBuilder closure. It will provide a consistent header with navigation links, a main content area for page-specific content, and a footer with copyright information.

                This component will be reused across all pages to maintain a consistent look and feel.

                @Code(name: "Layout.swift", file: layout-component.swift)
            }
        }
    }

    @Section(title: "Create the Home Page") {
        Build the main landing page for your static site with a welcoming message and navigation.

        @Steps {
            @Step {
                Create a new Swift file called HomePage.swift in your Sources directory.

                In this file, we'll create a `HomePage` struct that conforms to the `HTML` protocol with a `document` property that creates a Document with metadata and content. We'll implement a `render()` method that uses our Layout component to wrap the page-specific content, defining a Section with a heading and paragraphs. The Layout component handles the header, navigation, and footer automatically, so we only need to focus on the main content.

                @Code(name: "HomePage.swift", file: home-page.swift)
            }
        }
    }

    @Section(title: "Create the About Page") {
        Add a second page with information about your site or project.

        @Steps {
            @Step {
                Create a new Swift file called AboutPage.swift in your Sources directory.

                The About page also uses the same Layout component but customizes it with different page metadata (title and description). It contains unique content about your site including multiple sections, feature descriptions, and a styled link button to return to the home page. By using the Layout component, we ensure consistency across pages.

                @Code(name: "AboutPage.swift", file: about-page.swift)
            }
        }
    }

    @Section(title: "Build the Website") {
        Create the main file that defines your website and builds the static HTML files.

        @Steps {
            @Step {
                Create an Application.swift file to define your website and build it.

                This main file imports the WebUI library and creates shared metadata for all pages. It defines a theme with fonts and colors, sets up the Application configuration, and configures the website with both pages as routes. Finally, it builds the static HTML files to the specified output directory.

                @Code(name: "Application.swift", file: application-main.swift)
            }

            @Step {
                Build and run your project to generate the static site.

                When the build completes, check your output directory to find the generated HTML files. You'll see index.html (Home page), about/index.html (About page), and a public directory with any assets. You can now open these files in a browser or deploy them to a web server.

                @Code(name: "Terminal", file: terminal-build.txt)
            }

            @Step {
                Preview the generated site locally.

                After building the site, you can preview it locally by opening the index.html file in a web browser. Alternatively, you can use a simple HTTP server to serve the files from the output directory.

                @Image(source: final-output.png, alt: "Previewing the site locally")
            }
        }
    }

    @Assessments {
        @MultipleChoice {
            What benefit does the Layout component provide when building a multi-page site?

            @Choice(isCorrect: false) {
                It automatically adds animations to page transitions

                @Justification {
                    The Layout component doesn't handle page transitions or animations. It provides a consistent structure across multiple pages.
                }
            }

            @Choice(isCorrect: true) {
                It ensures header, navigation, and footer are consistent across all pages

                @Justification {
                    Correct! The Layout component encapsulates common elements like the header, navigation, and footer, ensuring they're consistent across all pages while allowing for different content. It also maintains consistent spacing using EdgeInsets across all pages.
                }
            }

            @Choice(isCorrect: false) {
                It reduces the file size of the generated HTML

                @Justification {
                    While the Layout component helps with code organization and reuse, it doesn't directly impact the size of the generated HTML files. Its primary purpose is to maintain consistent structure and styling.
                }
            }
        }

        @MultipleChoice {
            How do you create a collection of pages to build as a website?

            @Choice(isCorrect: true) {
                Use the `Website` struct with an array of `Document` instances

                @Justification {
                    Correct! The `Website` struct takes an array of `Document` instances in its `routes` parameter to define all the pages of your site. In our implementation, we configure the Application with these routes, which are then used by both the Website constructor and the Layout component.
                }
            }

            @Choice(isCorrect: false) {
                Use the `build()` method on each `Document`

                @Justification {
                    Individual `Document` instances don't have a `build()` method. You need to use the `Website` struct to collect and build multiple pages.
                }
            }

            @Choice(isCorrect: false) {
                Create a `StaticSite` with page URLs

                @Justification {
                    WebUI doesn't have a `StaticSite` type. You should use the `Website` struct to define your static site.
                }
            }
        }
    }
}
