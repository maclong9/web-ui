import Foundation

/// Creates a complete HTML document by combinding the `metadata`, `theme` and document.
///
/// This is responsible for rendering the root `<html>` tag, which contains the `<head>` and `<body>` tags.
/// - The `<html>` tag is the root element of an HTML document and specifies the language of the document.
/// - The `<head>` tag, generated by `configuration.metadata.renderer()`, contains metadata about the document, such as title, description, keywords, author, and type.
/// - The `<body>` tag contains the main content of the HTML document, which is provided by the `content` property.
public struct Document {
  let path: String
  let configuration: Configuration
  let title: String
  let description: String
  let keywords: [String]?
  let author: String?
  let type: String?
  private let contentBuilder: () -> [any HTML]

  var content: [any HTML] {
    contentBuilder()
  }

  /// Creates a new HTML document
  ///
  /// - Parameters:
  ///   - path: The pathname of the route, this is how it will appear in HTML so link to the route with this e.g. `path/to/route`
  ///   - configuration: The configuration settings to use including your global metadata.
  ///   - title: The page title for SEO and tab identification.
  ///   - description: A description of the HTML document, used for social media and search engine information.
  ///   - keywords: A collection of keywords related to the contents of the document.
  ///   - author: The person responsible for writing the document.
  ///   - type: The OG type used to categorise the website.
  ///   - content: A builder that provides the inner HTML content, such as text or other elements, to go inside the tag.
  init(
    path: String,
    configuration: Configuration = Configuration(),
    title: String,
    description: String,
    keywords: [String]? = nil,
    author: String? = nil,
    type: String? = nil,
    @HTMLBuilder content: @escaping () -> [any HTML]
  ) {
    self.path = path
    self.configuration = configuration
    self.title = title
    self.description = description
    self.keywords = keywords
    self.author = author
    self.type = type
    self.contentBuilder = content
  }

  /// Renders the full HTML document structure and the nested content.
  func render() -> String {
    """
    <!DOCTYPE html>
    <html lang="\(configuration.metadata.locale)">
        \(configuration.metadata.render(
                pageTitle: "\(title) | \(configuration.metadata.site)",
                description: description,
                twitter: configuration.metadata.twitter,
                author: author,
                keywords: keywords,
                type: type
            ))
        <body>
          \(content.map { $0.render() }.joined())
        </body>
    </html>
    """
  }
}
