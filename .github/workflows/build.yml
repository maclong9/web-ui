name: WebUI Static Site Build

on:
  workflow_call:
    inputs:
      swift-version:
        description: 'Swift version to use'
        required: false
        type: string
        default: '6.1'
      build-command:
        description: 'Custom build command'
        required: false
        type: string
        default: 'swift build -v'
      generate-command:
        description: 'Site generation command'
        required: false
        type: string
        default: 'swift run Application'
      output-directory:
        description: 'Output directory path'
        required: false
        type: string
        default: '.output'
      static-branch:
        description: 'Branch to push static content to'
        required: false
        type: string
        default: 'static'
      working-directory:
        description: 'Working directory for build commands'
        required: false
        type: string
        default: '.'

permissions:
  contents: write

jobs:
  web-ui-build:
    runs-on: macos-15
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    steps:
      - uses: actions/checkout@v4

      - name: Cache Swift Toolchain
        uses: actions/cache@v4
        id: cache-swift-toolchain
        with:
          path: ~/Library/Developer/Toolchains
          key: ${{ runner.os }}-swift-toolchain-v1
          restore-keys: |
            ${{ runner.os }}-swift-toolchain-

      - name: Setup Swift
        uses: swift-actions/setup-swift@v2
        with:
          swift-version: ${{ inputs.swift-version }}
        if: steps.cache-swift-toolchain.outputs.cache-hit != 'true'

      - name: Cache Swift Build
        uses: actions/cache@v4
        id: cache-swift-build
        with:
          path: ${{ inputs.working-directory }}/.build
          key: ${{ runner.os }}-swift-build-${{ hashFiles(format('{0}/Package.swift', inputs.working-directory), format('{0}/Sources/**', inputs.working-directory)) }}
          restore-keys: |
            ${{ runner.os }}-swift-build-

      - name: Build
        run: ${{ inputs.build-command }}
        if: steps.cache-swift-build.outputs.cache-hit != 'true'

      - name: Cache Generated Site
        uses: actions/cache@v4
        id: cache-site-output
        with:
          path: ${{ inputs.working-directory }}/${{ inputs.output-directory }}
          key: ${{ runner.os }}-site-output-${{ hashFiles(format('{0}/Sources/**', inputs.working-directory)) }}
          restore-keys: |
            ${{ runner.os }}-site-output-

      - name: Generate Site
        run: ${{ inputs.generate-command }}
        if: steps.cache-site-output.outputs.cache-hit != 'true'

      - name: Push to static branch
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        working-directory: .
        run: |
          set -euo pipefail
          echo "üîß Configuring Git user"
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

          echo "üåø Switching to static branch: ${{ inputs.static-branch }}"
          git checkout -B "${{ inputs.static-branch }}"

          echo "üßπ Cleaning current contents"
          rm -rf ./*

          SOURCE="${{ inputs.working-directory }}/${{ inputs.output-directory }}"
          echo "üìÅ Copying from output directory: $SOURCE"

          if [ ! -d "$SOURCE" ]; then
            echo "‚ùå ERROR: Directory '$SOURCE' does not exist"
            exit 1
          fi

          if [ -z "$(ls -A "$SOURCE")" ]; then
            echo "‚ùå ERROR: Directory '$SOURCE' is empty"
            exit 1
          fi

          echo "üì¶ Files in output directory:"
          ls -al "$SOURCE"

          echo "üì• Copying files (including dotfiles)"
          cp -r "$SOURCE"/. .

          echo "üßΩ Cleaning up source and build artifacts"
          rm -rf "$SOURCE" .gitignore .github .build .swift-format Public

          echo "üìù Git add & commit"
          git add .
          git commit -m "Update static site content"
          git push origin "${{ inputs.static-branch }}" --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
