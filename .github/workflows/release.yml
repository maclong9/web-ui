name: Automated Release
on:
  push:
    branches: [main, next]
  pull_request:
    branches: [main, next]

permissions:
  contents: write
  actions: read

jobs:
  release:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Swift
        uses: swift-actions/setup-swift@v2
        with:
          swift-version: "6.1"

      - name: Cache SwiftPM
        uses: actions/cache@v4
        with:
          path: .build
          key: ${{ runner.os }}-swiftpm-${{ hashFiles('**/Package.resolved') }}

      - name: Check commit and bump version
        id: version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          BRANCH=${{ github.ref_name }}
          if ! [[ $COMMIT_MSG =~ ^(feat!|feat|fix): ]]; then
            echo "No release needed"
            exit 0
          fi

          LATEST_TAG=$(git tag -l '[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n 1 || echo "0.0.0")
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"

          case $COMMIT_MSG in
            feat!*) MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0 ;;
            feat:*) MINOR=$((MINOR + 1)); PATCH=0 ;;
            fix:*)  PATCH=$((PATCH + 1)) ;;
          esac

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          TAG=$([ "$BRANCH" = "main" ] && echo "$NEW_VERSION" || echo "next-$NEW_VERSION")
          TITLE=$([ "$BRANCH" = "main" ] && echo "Release $NEW_VERSION" || echo "Pre-release $TAG")
          PRERELEASE=$([ "$BRANCH" = "main" ] && echo "false" || echo "true")

          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "title=$TITLE" >> $GITHUB_OUTPUT
          echo "prerelease=$PRERELEASE" >> $GITHUB_OUTPUT
          echo "notes=$(git log ${LATEST_TAG:+${LATEST_TAG}..HEAD} --pretty=format:'- %s')" >> $GITHUB_OUTPUT

      - name: Run tests
        if: steps.version.outputs.tag
        run: swift test

      - name: Create release
        if: steps.version.outputs.tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "${{ steps.version.outputs.tag }}" -m "${{ steps.version.outputs.tag }}"
          git push origin "${{ steps.version.outputs.tag }}"
          gh release create "${{ steps.version.outputs.tag }}" \
            --title "${{ steps.version.outputs.title }}" \
            --notes "${{ steps.version.outputs.notes }}" \
            --prerelease=${{ steps.version.outputs.prerelease }}
