name: Automated Release
on:
  push:
    branches: [main, next]
  pull_request:
    branches: [main, next]

permissions:
  contents: write
  actions: read

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Swift
        uses: swift-actions/setup-swift@v2
        with:
          swift-version: "6.1"

      - name: Cache SwiftPM dependencies
        uses: actions/cache@v3
        with:
          path: .build
          key: ${{ runner.os }}-swiftpm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-swiftpm-

      - name: Resolve dependencies
        run: swift package resolve

      - name: Run tests
        run: swift test

      - name: Bump version and create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          [[ $COMMIT_MESSAGE =~ ^(feat!|feat:|fix:) ]] || { echo "No release needed"; exit 0; }

          LATEST_TAG=$(git tag -l '[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n 1)
          CURRENT_VERSION="${LATEST_TAG:-0.0.0}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          case "$COMMIT_MESSAGE" in
            feat!*) MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0 ;;
            feat:*) MINOR=$((MINOR + 1)); PATCH=0 ;;
            fix:*)  PATCH=$((PATCH + 1)) ;;
          esac

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          BRANCH_NAME=${{ github.ref_name }}

          if [ "$BRANCH_NAME" = "main" ]; then
            RELEASE_TAG="$NEW_VERSION"
            RELEASE_TITLE="Release $NEW_VERSION"
            IS_PRERELEASE=false
          else
            RELEASE_TAG="next-$NEW_VERSION"
            RELEASE_TITLE="Pre-release next-$NEW_VERSION"
            IS_PRERELEASE=true
          fi

          echo "Bumping version to $RELEASE_TAG"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git tag -a "$RELEASE_TAG" -m "$RELEASE_TAG"
          git push origin "$RELEASE_TAG"

          if [ -z "$LATEST_TAG" ]; then
            RELEASE_NOTES=$(git log --pretty=format:"- %s")
          else
            RELEASE_NOTES=$(git log "$LATEST_TAG"..HEAD --pretty=format:"- %s")
          fi

          gh release create "$RELEASE_TAG" \
            --title "$RELEASE_TITLE" \
            --notes "$RELEASE_NOTES" \
            --prerelease=$IS_PRERELEASE
